{"version":3,"sources":["app.js","nav/main-nav-controller.js","users/user-controller.js","users/user.js","users/users-controller.js","shares/VoteFactory.js","shares/comment.js","shares/new-share-controller.js","shares/share-controller.js","shares/share.js","shares/shares-controller.js","utils/string-util.js","users/services/users-service.js","shares/services/share-service.js"],"names":[],"mappings":"AAAA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACznfile":"app.js","sourcesContent":["// The root module for our Angular application\nvar app = angular.module('app', ['ngRoute']);","app.controller('MainNavCtrl',\n  ['$location', 'StringUtil', 'usersService', function($location, StringUtil, usersService) {\n    var self = this;\n\n    self.isActive = function (path) {\n      // The default route is a special case.\n      if (path === '/') {\n        return $location.path() === '/';\n      }\n\n      return StringUtil.startsWith($location.path(), path);\n    };\n\n    usersService.currentUser().then(function (data) {\n      self.currentUser = data;\n    });\n\n    function windowWidthLess () {\n      return $(window).width() < 459;\n    }\n\n    function checkbox (bool) {\n      $('.main-checkbox').prop('checked', bool);\n    }\n\n    function changeHeight (height) {\n      $('.header-index').css({\n        'height': height + 'px'\n      });\n      $('.site-header').css({\n        'height': height + 'px'\n      });\n    }\n\n    $('.for-clicking').on('click', function () {\n      if (windowWidthLess()) {\n        console.log('hey');\n        checkbox(true);\n        changeHeight(150);\n        if ($('.header-left').length === 5) {\n          changeHeight(180);\n        }\n      }\n    });\n\n    if ($(window).width() > 460) {\n      $('.for-clicking').hide();\n      changeHeight(45)\n    }\n\n    $(window).resize(function() {\n      if ($(window).width() > 460) {\n        changeHeight(45)\n        $('.for-clicking').hide();\n      }\n    });\n\n    $(window).resize(function() {\n        if (windowWidthLess()) {\n          checkbox(false);\n          $('.for-clicking').show();\n          changeHeight(50);\n        }\n    });\n\n    $('.header-left').on('click', function () {\n      if (windowWidthLess()) {\n        checkbox(false);\n        changeHeight(50);\n        $('.site-header').animate({\n          'height': '50px',\n        }, 500);\n      }\n    });\n\n    $('.root-content').on('click', function () {\n      if (windowWidthLess()) {\n        checkbox(false);\n        changeHeight(50);\n        $('.site-header').animate({\n          'height': '50px',\n        }, 500);\n      }\n    });\n  }]);\n","app.config(['$routeProvider',\n    function($routeProvider) {\n        var routeDefinition = {\n            templateUrl: 'users/user.html',\n            controller: 'UserCtrl',\n            controllerAs: 'vm',\n            resolve: {\n                user: ['$route', 'usersService',\n                    function($route, usersService) {\n                        var routeParams = $route.current.params;\n                        console.log(routeParams.userid);\n                        return usersService.getByUserId(routeParams.userid);\n                    }\n                ]\n            }\n        };\n\n        $routeProvider.when('/users/:userid', routeDefinition);\n    }\n])\n    .controller('UserCtrl', ['user',\n        function(user) {\n            this.user = user;\n            console.log(user);\n        }\n    ]);","app.factory('User', function() {\n    return function(spec) {\n        spec = spec || {};\n        return {\n            userId: spec.userId || '',\n            role: spec.role || 'user'\n        };\n    };\n});","app.config(['$routeProvider',\n    function($routeProvider) {\n        var routeDefinition = {\n            templateUrl: 'users/users.html',\n            controller: 'UsersCtrl',\n            controllerAs: 'vm',\n            resolve: {\n                users: ['usersService',\n                    function(usersService) {\n                        return usersService.list();\n                        //Returns a list of users as an array..\n                    }\n                ],\n\n                currentUser: ['usersService',\n                    function(usersService) {\n                        return usersService.currentUser();\n                    }\n                ]\n            }\n        };\n\n        $routeProvider.when('/users', routeDefinition);\n    }\n])\n    .controller('UsersCtrl', ['users', 'currentUser', 'usersService', 'User',\n        function(users, currentUser, usersService, User) {\n            var self = this;\n\n            self.users = users;\n            console.log(users);\n\n            self.currentUser = currentUser;\n\n            self.newUser = User();\n\n            self.addUser = function() {\n                // Make a copy of the 'newUser' object\n                var newUser = User(self.newUser);\n\n                // Add the user to our service\n                usersService.addUser(newUser).then(function() {\n                    // If the add succeeded, remove the user from the users array\n                    self.users = self.users.filter(function(existingUser) {\n                        return existingUser.userId !== newUser.userId;\n                    });\n\n                    // Add the user to the users array\n                    self.users.push(newUser);\n                });\n\n                // Clear our newUser property\n                self.newUser = User();\n\n                console.log(users);\n            };\n        }\n    ]);","app.factory('VoteFactory', ['shareService',\n    function(shareService) {\n\n        var ups;\n        var downs;\n\n        function getVotes(votes, dir, rgb) {\n            var newVotes = votes + 1;\n            var el = $(event.target).parent().find('.fa-arrow-' + dir);\n            if (el.css('color') !== rgb) {\n                $(event.target).parent().find('.' + dir + 'vote-count').html(dir + 'votes: ' + newVotes);\n            };\n        };\n\n        function upvote(color, id, upvotes, downvotes) {\n            getVotes(upvotes, 'up', 'rgb(0, 0, 255)');\n            ups = (upvotes + 1);\n            event.target.style.color = color;\n            var downEl = $(event.target).parent().find('.fa-arrow-down');\n            if (downEl.css('color') === 'rgb(255, 165, 0)') {\n                downEl.css({\n                    'color': '#ecf0f1'\n                });\n                shareService.undovote(id, 'down', (downs - 1));\n            }\n            shareService.upvote(id);\n        };\n\n        function downvote(color, id, downvotes, upvotes) {\n            getVotes(downvotes, 'down', 'rgb(255, 165, 0)');\n            downs = (downvotes + 1);\n            event.target.style.color = color;\n\n            console.log(ups);\n            var upEl = $(event.target).parent().find('.fa-arrow-up');\n            if (upEl.css('color') === 'rgb(0, 0, 255)') {\n                console.log(ups);\n                eraseVote(id, 'up', (ups - 1));\n            }\n            shareService.downvote(id);\n        }\n\n        function eraseVote(id, dir, votes) {\n            var el = $(event.target).parent().find('.fa-arrow-' + dir);\n            el.css({\n                'color': '#ecf0f1'\n            });\n            $(event.target).parent().find('.' + dir + 'vote-count').html(dir + 'votes: ' + votes);\n            shareService.undovote(id);\n        }\n\n        return {\n            vote: function(color, voted, id, upvotes, downvotes) {\n                if (voted === 'upvote' && (event.target.style.color === 'blue')) {\n                    eraseVote(id, 'up', upvotes);\n                } else if (voted === 'downvote' && (event.target.style.color === 'orange')) {\n                    eraseVote(id, 'down', downvotes);\n                } else if (voted === 'upvote') {\n                    upvote(color, id, upvotes, downvotes);\n                } else if (voted === 'downvote') {\n                    downvote(color, id, downvotes, upvotes);\n                }\n            }\n        };\n\n    }\n]);","app.factory('Comment', function() {\n    return function(spec) {\n        spec = spec || {};\n        return {\n            userId: spec.userId,\n            text: spec.text,\n            subjectId: spec.shareId,\n            created: Date.now()\n        };\n    };\n});","app.config(['$routeProvider', function ($routeProvider) {\n  $routeProvider.when('/shares/new-share', {\n    controller: 'NewShareCtrl',\n    controllerAs: 'vm',\n    templateUrl: 'shares/new-share.html'\n  });\n}]).controller('NewShareCtrl', ['$location', 'Share', 'shareService', function ($location, Share, shareService) {\n  var self = this;\n\n  self.share = Share();\n\n  self.cancelEdit = function () {\n    self.viewShares();\n  };\n\n  self.viewShares = function () {\n    $location.path('/shares');\n  };\n\n  self.addShare = function () {\n    shareService.addShare(self.share).then(self.viewShares);\n    console.log(self.share);\n  };\n\n}]);\n","app.config(['$routeProvider',\n    function($routeProvider) {\n        var routeDefinition = {\n            templateUrl: 'shares/share.html',\n            controller: 'ShareCtrl',\n            controllerAs: 'vm',\n            resolve: {\n                share: ['$route', 'Comment', 'shareService',\n                    function($route, Comment, shareService) {\n                        var routeParams = $route.current.params;\n                        console.log(routeParams.shareid);\n                        return shareService.getByShareId(routeParams.shareid);\n                    }\n                ],\n                comments: ['$route', 'shareService',\n                    function($route, shareService) {\n                        var routeParams = $route.current.params;\n                        return shareService.listComments(routeParams.shareid);\n                    }\n                ]\n            }\n        };\n\n        $routeProvider.when('/shares/:shareid', routeDefinition);\n        $routeProvider.when('/shares/:shareid/comments', routeDefinition);\n    }\n]).controller('ShareCtrl', ['share', 'shareService', 'Comment', 'comments',\n    function(share, shareService, Comment, comments) {\n        var self = this;\n\n        self.share = share;\n        self.comments = comments;\n        self.comment = Comment();\n\n        self.addComment = function() {\n            shareService.addComment(self.share._id, self.comment).then(function(comment) {\n                self.comments.push(comment);\n                self.comment.text = '';\n            });\n        };\n\n        self.listComments = function() {\n            shareService.listComments(self.share._id);\n        };\n\n    }\n]);","app.factory('Share', function() {\n    return function(spec) {\n        spec = spec || {};\n        return {\n            url: spec.url,\n            description: spec.description,\n            upvotes: spec.upvotes,\n            downvotes: spec.downvotes\n        };\n    };\n});","app.config(['$routeProvider',\n    function($routeProvider) {\n        var routeDefinition = {\n            templateUrl: 'shares/shares.html',\n            controller: 'SharesCtrl',\n            controllerAs: 'vm',\n            resolve: {\n                shares: ['shareService',\n                    function(shareService) {\n                        return shareService.list();\n                    }\n                ],\n                users: ['usersService',\n                    function(usersService) {\n                        return usersService.list();\n                    }\n                ]\n            }\n        };\n\n        $routeProvider.when('/', routeDefinition);\n        $routeProvider.when('/shares', routeDefinition);\n    }\n])\n    .controller('SharesCtrl', ['shareService', 'users', 'shares', '$route', 'Share', 'VoteFactory',\n        function(shareService, users, shares, $route, Share, VoteFactory) {\n\n            var self = this;\n\n            self.shares = shares;\n\n            self.vote = function(color, voted) {\n                var indexNum = $(event.target).parent().index();\n                var id = self.shares[indexNum]._id;\n                var upvotes = self.shares[indexNum].upvotes;\n                var downvotes = self.shares[indexNum].downvotes;\n                VoteFactory.vote(color, voted, id, upvotes, downvotes);\n            };\n\n            self.delete = function(shareId) {\n                shareService.deleteShare(shareId).then($route.reload());\n            };\n\n            self.view = function(shareId) {\n                shareService.getShareById(shareId).then();\n                //ng-hide a copy of the form, ng-repeat(?) to populate the form with current share information which is retrieved by\n                //id when the edit button is ng-click(ed).  Haha.  Submit button submits the form.  The API has function to deal deal\n                //with duplicate user.  It states to replace current info with new info.\n            };\n\n        }\n    ]);","// A little string utility... no biggie\napp.factory('StringUtil', function() {\n    return {\n        startsWith: function(str, subStr) {\n            str = str || '';\n            return str.slice(0, subStr.length) === subStr;\n        }\n    };\n});","app.factory('usersService', ['$http', '$q', '$log',\n    function($http, $q, $log) {\n        // My $http promise then and catch always\n        // does the same thing, so I'll put the\n        // processing of it here. What you probably\n        // want to do instead is create a convenience object\n        // that makes $http calls for you in a standard\n        // way, handling post, put, delete, etc\n        function get(url) {\n            return processAjaxPromise($http.get(url));\n        }\n\n        function processAjaxPromise(p) {\n            return p.then(function(result) {\n                    return result.data;\n                })\n                .catch(function(error) {\n                    $log.log(error);\n                });\n        }\n\n        return {\n            list: function() {\n                return get('/api/users');\n            },\n\n            getByUserId: function(userId) {\n                if (!userId) {\n                    throw new Error('getByUserId requires a user id');\n                }\n\n                return get('/api/users/' + userId);\n            },\n\n            addUser: function(user) {\n                return processAjaxPromise($http.post('/api/users', user));\n            },\n\n            currentUser: function() {\n                return get('/api/users/me');\n            }\n        };\n    }\n]);","//Share Store, call AJAX\n\napp.factory('shareService', ['$http', '$log',\n    function($http, $log) {\n\n        function get(url) {\n            return processAjaxPromise($http.get(url));\n        }\n\n        function post(url, share) {\n            return processAjaxPromise($http.post(url, share));\n        }\n\n        function remove(url) {\n            return processAjaxPromise($http.delete(url));\n        }\n\n        function processAjaxPromise(p) {\n            return p.then(function(result) {\n                    return result.data;\n                })\n                .catch(function(error) {\n                    $log.log(error);\n                });\n        }\n\n        return {\n            list: function() {\n                return get('/api/res');\n            },\n\n            getByShareId: function(shareId) {\n                return get('/api/res/' + shareId);\n            },\n\n            getVotes: function(shareId) {\n                return get('/api/res/' + shareId + '/votes');\n            },\n\n            addShare: function(share) {\n                return post('/api/res', share);\n            },\n\n            deleteShare: function(shareId) {\n                return remove('/api/res/' + shareId);\n            },\n\n            upvote: function(shareId) {\n                return post('/api/res/' + shareId + '/votes', {\n                    vote: 1\n                });\n            },\n\n            downvote: function(shareId) {\n                return post('/api/res/' + shareId + '/votes', {\n                    vote: -1\n                });\n            },\n\n            undovote: function(shareId) {\n                return post('/api/res/' + shareId + '/votes', {\n                    vote: 0\n                });\n            },\n\n            listComments: function(shareId) {\n                return get('/api/res/' + shareId + '/comments');\n            },\n\n            addComment: function(shareId, comment) {\n                return post('/api/res/' + shareId + '/comments', comment);\n            },\n\n            deleteComment: function(shareId, comment) {\n                return delete('/api/res/' + shareId + '/comments/:id');\n            }\n\n        };\n\n    }\n]);"],"sourceRoot":"/source/"}