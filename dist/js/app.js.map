{"version":3,"sources":["app.js","css/styles.js","nav/main-nav-controller.js","shares/UserFactory.js","shares/VoteFactory.js","shares/jordan.js","shares/new-share-controller.js","shares/share.js","shares/shares-controller.js","utils/string-util.js","users/user-controller.js","users/user.js","users/users-controller.js","shares/services/share-service.js","users/services/users-service.js"],"names":[],"mappings":"AAAA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpfile":"app.js","sourcesContent":["// The root module for our Angular application\nvar app = angular.module('app', ['ngRoute']);\n","$(function () {\n\n\t// console.log($('.main-checkbox').prop('checked'))\n\n\t// if ($('.main-checkbox').prop('checked')) {\n\t// \tconsole.log('eh')\n\t// \t$('.site-header').css({\n\t// \t\t'height': '155px'\n\t// \t})\n\t// };\n\n\t// function screenWidthAdjustment () {\n\t// \tconsole.log('eh')\n\t// \tvar move = $('.header-new-link-button').detach();\n\t// \tmove.appendTo('.header-login-button')\n\t// }\n\n\t// function screenWidthRevert () {\n\t// \tvar move = $('.header-new-link-button').detach();\n\t// \tmove.appendTo('.links-div')\n\t// }\n\n\t// if ($(window).width() < 750) {\n\t//     screenWidthAdjustment()\n\t// }\n\n\t// $(window).resize(function() {\n\t//     if ($(window).width() < 750) {\n\t//         screenWidthAdjustment()\n\t//     }\n\t// });\n\n\t// $(window).resize(function() {\n\t//     if ($(window).width() > 750) {\n\t//         screenWidthRevert()\n\t//     }\n\t// });\n\n});","app.controller('MainNavCtrl',\n  ['$location', 'StringUtil', function($location, StringUtil) {\n    var self = this;\n\n    self.isActive = function (path) {\n      // The default route is a special case.\n      if (path === '/') {\n        return $location.path() === '/';\n      }\n\n      return StringUtil.startsWith($location.path(), path);\n    };\n\n    $('.for-clicking').on('click', function () {\n      console.log(\"eh\")\n      $('.main-checkbox').prop('checked', true)\n      $('.site-header').css({\n        'height': '155px',\n      });\n    });\n\n    $('.header-left').on('click', function () {\n      $('.main-checkbox').prop('checked', false)\n      $('.site-header').animate({\n        'height': '50px',\n      }, 500);\n    })\n  }]);\n","// app.factory('UserFactory', function() {\napp.factory('UserFactory', ['$route', 'usersService', function($route, usersService) {\n\n    \n    return {\n    \tuser: function () {\n    \t\t// var routeParams = $route.current.params;\n    \t\t// console.log(routeParams)\n    \t\t// console.log(routeParams.userid)\n\t\t    // var user = usersService.getByUserId(routeParams.userid);\n\t\t    // console.log(user);\n\t\t    // console.log('hey')\n    \t}\n    }\n\n// });\n}]);","app.factory('VoteFactory', function () {\n\t\n\tfunction upvote (color) {\t\t\n\t\tconsole.log($(this));\n\t\tevent.target.style.color = color;\n\t\tvar downEl = $(event.target).parent().find('.fa-arrow-down')\n\t\tconsole.log(downEl.css('color'))\n\t\tif (downEl.css('color') === 'rgb(255, 165, 0)') {\n\t\t\tconsole.log('hey')\n\t\t\tdownEl.css({\n\t\t\t\t'color': 'lightgray'\n\t\t\t});\n\t\t};\n\t\t// function that accesses a function in Ashley's code to upvote\n\t}\n\n\tfunction downvote (color) {\n\t\tconsole.log('test1');\n\t\tevent.target.style.color = color;\n\t\tvar downEl = $(event.target).parent().find('.fa-arrow-up')\n\t\tconsole.log(downEl.css('color'))\n\t\tif (downEl.css('color') === 'rgb(0, 0, 255)') {\n\t\t\tconsole.log('hey')\n\t\t\tdownEl.css({\n\t\t\t\t'color': 'lightgray'\n\t\t\t});\n\t\t};\n\t\t// function that accesses a function in Ashley's code to downvote\n\t}\n\n\tfunction eraseVote () {\n\t\tconsole.log('try again');\n\t\tevent.target.style.color = 'lightgray';\n\t\t// function that accesses a function in Ashley's code to erase vote\n\t}\n\n\treturn {\n\t\tvote: function (color, voted) {\n\t\t  \t// document.querySelector(el).onclick = function () {\n\t\t\t  \t\n\t\t\t  // }\n\t\t\t  console.log($(this));\n\t\t    if (voted === 'upvote' && (event.target.style.color === 'blue')) {\n\t\t    \teraseVote();\n\t\t    } else if (voted === 'downvote' && (event.target.style.color === 'orange')) {\n\t\t    \teraseVote();\n\t\t    } else if (voted === 'upvote') {\n\t\t    \tupvote(color);\n\t\t    } else if (voted === 'downvote') {\n\t\t    \tdownvote(color);\n\t\t    } \n\t    }\n\t};\n\n});","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'shares/shares.html',\n    controller: 'SharesCtrl',\n    controllerAs: 'vm'\n  };\n\n  $routeProvider.when('/', routeDefinition);\n  $routeProvider.when('/shares', routeDefinition);\n}])\n.controller('SharesCtrl', ['VoteFactory', function (VoteFactory) {\n  // TODO: load these via AJAX\n  var self = this;\n\n  self.shares = [];\n\n  // self.chosen;\n  // self.upCounter = 0;\n  // self.downCounter = 0;\n\n  // self.vote = function (direction) {\n  // \tself.chosen = direction;\n  // };\n\n  // self.vote = function (color, vote) {\n  // \t// document.querySelector(el).onclick = function () {\n\t //  \tevent.target.style.color = color\n\t //  // }\n  //   if (vote = 'upvote') {\n\n  //   }\n  // }\n\n  self.vote = function (color, voted) {\n    VoteFactory.vote(color, voted);\n  };\n\n  // todo:\n  // -add an upvote and downvote counter to each li. Need to create a function within whatever Ashley is pushing to an array\n  // that you can access. With that access, you'll need to create the function in your VoteFactory, probably using dependency\n  // injection from her controller. The details page should have something like \"upvotes= {{upvotes}}\".\n\n\n}]);\n","app.config(['$routeProvider', function ($routeProvider) {\n  $routeProvider.when('/shares/new-share', {\n    controller: 'NewShareCtrl',\n    controllerAs: 'vm',\n    templateUrl: 'shares/new-share.html'\n  });\n}]).controller('NewShareCtrl', ['$location', 'Share', 'shareService', function ($location, Share, shareService) {\n  var self = this;\n\n  self.share = Share();\n\n  self.cancelEdit = function () {\n    self.viewShares();\n  };\n\n  self.viewShares = function () {\n    $location.path('/shares');\n  };\n\n  self.addShare = function () {\n    shareService.addShare(self.share).then(self.viewShares);\n  };\n}]);\n","\napp.factory('Share', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      url: spec.url,\n      description: spec.description,\n      upvoteCounter: spec.upvoteCounter,\n      downvoteCounter: spec.downvoteCounter\n    };\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'shares/shares.html',\n    controller: 'SharesCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      shares: ['shareService', function (shareService) {\n        return shareService.list();\n      }]\n    }\n  };\n\n  $routeProvider.when('/', routeDefinition);\n  $routeProvider.when('/shares', routeDefinition);\n}])\n.controller('SharesCtrl', ['shareService', 'shares', 'Share', 'VoteFactory', function (shareService, shares, Share, VoteFactory) {\n\n  var self = this;\n\n  self.shares = shares;\n\n  self.vote = function (color, voted) {\n    VoteFactory.vote(color, voted);\n  };\n}]);\n","// A little string utility... no biggie\napp.factory('StringUtil', function() {\n  return {\n    startsWith: function (str, subStr) {\n      str = str || '';\n      return str.slice(0, subStr.length) === subStr;\n    }\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'users/user.html',\n    controller: 'UserCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      user: ['$route', 'usersService', function ($route, usersService) {\n        var routeParams = $route.current.params;\n        console.log(routeParams.userid)\n        return usersService.getByUserId(routeParams.userid);\n      }]\n    }\n  };\n\n  $routeProvider.when('/users/:userid', routeDefinition);\n}])\n.controller('UserCtrl', ['user', function (user) {\n  this.user = user;\n  console.log(user);\n}]);\n","app.factory('User', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      userId: spec.userId || '',\n      role: spec.role || 'user'\n    };\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'users/users.html',\n    controller: 'UsersCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      users: ['usersService', function (usersService) {\n        return usersService.list();\n        //Returns a list of users as an array..\n      }]\n    }\n  };\n\n  $routeProvider.when('/users', routeDefinition);\n}])\n.controller('UsersCtrl', ['users', 'usersService', 'User', function (users, usersService, User) {\n  var self = this;\n\n  self.users = users;\n\n  self.newUser = User();\n\n  self.addUser = function () {\n    // Make a copy of the 'newUser' object\n    var newUser = User(self.newUser);\n\n    // Add the user to our service\n    usersService.addUser(newUser).then(function () {\n      // If the add succeeded, remove the user from the users array\n      self.users = self.users.filter(function (existingUser) {\n        return existingUser.userId !== newUser.userId;\n      });\n\n      // Add the user to the users array\n      self.users.push(newUser);\n    });\n\n    // Clear our newUser property\n    self.newUser = User();\n\n    console.log(users);\n  };\n}]);\n","//Share Store, call AJAX\n\napp.factory('shareService', ['$http', '$log', function ($http, $log) {\n\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function post(url, share) {\n    return processAjaxPromise($http.post(url, share));\n  }\n\n  function remove(url) {\n    return processAjaxPromise($http.remove(url));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      return result.data;\n    })\n    .catch(function (error) {\n      $log.log(error);\n    });\n  }\n\n  return {\n    list: function () {\n      return get('/api/res');\n    },\n\n    getByShareId: function (shareId) {\n      return get('/api/res/' + shareId);\n    },\n\n    addShare: function (share) {\n      return post('/api/res', share);\n    },\n\n    deleteShare: function (shareId) {\n      return remove('/api/res/' + shareId);\n    }\n  };\n}]);\n","app.factory('usersService', ['$http', '$q', '$log', function($http, $q, $log) {\n  // My $http promise then and catch always\n  // does the same thing, so I'll put the\n  // processing of it here. What you probably\n  // want to do instead is create a convenience object\n  // that makes $http calls for you in a standard\n  // way, handling post, put, delete, etc\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      return result.data;\n    })\n    .catch(function (error) {\n      $log.log(error);\n    });\n  }\n\n  return {\n    list: function () {\n      return get('/api/users');\n    },\n\n    getByUserId: function (userId) {\n      if (!userId) {\n        throw new Error('getByUserId requires a user id');\n      }\n\n      return get('/api/users/' + userId);\n    },\n\n    addUser: function (user) {\n      return processAjaxPromise($http.post('/api/users', user));\n    }\n  };\n}]);\n"],"sourceRoot":"/source/"}